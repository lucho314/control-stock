generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum FormaDePago {
  TARJETA
  EFECTIVO
  TRANSFERENCIA
  OTRO
}

model acciones_de_usuario {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_id String?   @db.Uuid
  accion     String?
  fecha      DateTime? @default(now()) @db.Timestamptz(6)
  usuarios   usuarios? @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model clientes {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String?
  contacto         String?
  direccion        String?
  email            String?
  telefono         String?
  dni              String            @unique
  ventas       venta[]
}

model detalle_ordenes_de_compra {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orden_compra_id String?  @db.Uuid
  producto_id     String?  @db.Uuid
  cantidad        Int?
  precio_unitario Decimal? @db.Decimal
}

model detalle_ordenes_de_venta {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orden_venta_id  String?  @db.Uuid
  producto_id     String?  @db.Uuid
  cantidad        Int?
  precio_unitario Decimal? @db.Decimal
}

// model facturas {
//   id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   orden_venta_id   String?           @db.Uuid
//   total            Decimal?          @db.Decimal
//   fecha_factura    DateTime?         @default(now()) @db.Timestamptz(6)
//   ordenes_de_venta ordenes_de_venta? @relation(fields: [orden_venta_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

model inventario {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  producto_id       String?    @db.Uuid
  stock_disponible  Int?
  stock_reservado   Int?
  stock_en_transito Int?
  productos         productos? @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model movimientos_de_inventario {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  producto_id     String?    @db.Uuid
  tipo_movimiento String?
  cantidad        Int?
  fecha           DateTime?  @default(now()) @db.Timestamptz(6)
  motivo          String?
  origen          String?
  productos       productos? @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model niveles_de_stock {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  producto_id  String?    @db.Uuid
  stock_minimo Int?
  stock_maximo Int?
  productos    productos? @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ordenes_de_compra {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proveedor_id             String?                    @db.Uuid
  fecha_orden              DateTime?                  @default(now()) @db.Timestamptz(6)
  estado                   String?
  proveedores              proveedores?               @relation(fields: [proveedor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recepciones_de_productos recepciones_de_productos[]
}

// model ordenes_de_venta {
//   id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   cliente_id  String?    @db.Uuid
//   fecha_orden DateTime?  @default(now()) @db.Timestamptz(6)
//   estado      String?
//   facturas    facturas[]
//   clientes    clientes?  @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

model productos {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoria_id               String?                     @db.Uuid // Campo para la relación con la categoría
  nombre                    String?
  descripcion               String?
  precio                    Decimal?                    @db.Decimal
  precio_costo              Decimal?                    @db.Decimal
  porcentaje_ganancia       Decimal?                    @db.Decimal
  codigo_de_barras          String?
  proveedor_id              String?                     @db.Uuid
  inStock                   Int                         @default(0)
  peso                     Decimal?                    @db.Decimal  
  tamano                   Decimal?                    @db.Decimal
  color                    String?
  marca                    String?
  imagen                  String?                 
  codigo_interno           String?                    @unique
  activo                  Boolean?                    @default(true)
  created_by              String                   
  created_at             DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                   @updatedAt @db.Timestamptz(6)
  updated_by             String?
  inventario                inventario[]
  movimientos_de_inventario movimientos_de_inventario[]
  niveles_de_stock          niveles_de_stock[]
  proveedores               proveedores?                @relation(fields: [proveedor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recepciones_de_productos  recepciones_de_productos[]
  categoria                 Categoria?                  @relation(fields: [categoria_id], references: [id]) // Relación con la categoría
  ventas     venta_producto[]
  @@index([nombre, codigo_de_barras, codigo_interno])
}

model proveedores {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre            String?
  telefono         String?
  email            String?
  direccion        String?
  activo           Boolean?          @default(true)
  created_by              String                   
  created_at             DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                   @updatedAt @db.Timestamptz(6)
  updated_by             String?
  ordenes_de_compra ordenes_de_compra[]
  productos         productos[]
   @@index([activo, nombre])
}

model recepciones_de_productos {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orden_compra_id   String?            @db.Uuid
  producto_id       String?            @db.Uuid
  cantidad_recibida Int?
  fecha_recepcion   DateTime?          @default(now()) @db.Timestamptz(6)
  ordenes_de_compra ordenes_de_compra? @relation(fields: [orden_compra_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productos         productos?         @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre   String?
  usuarios usuarios[]
}

model usuarios {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre              String?
  rol                 String?
  email               String?
  contrasena          String?
  rol_id              String?               @db.Uuid
  created_by              String                   
  created_at             DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                   @updatedAt @db.Timestamptz(6)
  updated_by             String?
  acciones_de_usuario acciones_de_usuario[]
  roles               roles?                @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model User {
  id            String          @id @default(uuid())
  name          String?
  password      String?
  role          Role      @default(user)
  isActive      Boolean         @default(true)
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Categoria {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre      String   @unique
  descripcion String?
  productos    productos[]
}



model venta {
   id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   numeracion     String
   fecha          DateTime         @default(now())
   numero         String
   formaDePago    FormaDePago      // Enum
   clienteId      String           @db.Uuid
   neto           Float
   subTotal       Float
   bonificacion   Float?           // Bonificación es opcional
   iva            Float
   total          Float
   created_by              String                   
  created_at             DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                   @updatedAt @db.Timestamptz(6)
  updated_by             String?
   cliente        clientes         @relation(fields: [clienteId], references: [id])
   productos      venta_producto[] // Relación con venta_producto
}


model venta_producto {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ventaId        String           @db.Uuid
  productoId     String           @db.Uuid
  cantidad       Int
  precio         Float
  iva            Float
  total          Float
  productos      productos        @relation(fields: [productoId], references: [id])
  venta          venta            @relation(fields: [ventaId], references: [id])
}